// Code generated by go-bindata.
// sources:
// assets/dir.tpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsDirTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x52\xcb\x4e\xc3\x30\x10\xbc\xfb\x2b\x56\x3e\x43\x4c\xc5\xad\x6c\x7d\x47\x02\x84\xa0\x7c\x80\x8b\x37\xb1\xa5\xbc\x14\xef\xa1\xad\xe5\x7f\x47\x8e\x43\x89\x22\x6e\xb3\x33\x93\xdd\x99\xc8\xe8\xb8\x6b\xb5\x40\x47\xc6\x6a\x81\xec\xb9\x25\x1d\x63\xf5\x6e\x1a\x3a\xe6\x21\xa5\x3d\xcc\x33\xbb\x94\x50\x15\x83\xc0\xc0\x97\x96\x80\x2f\x23\x1d\x24\xd3\x99\xd5\x77\x08\x52\x0b\x36\xa7\x4c\xbb\x3b\x58\x90\x85\x28\x00\x46\x63\xad\xef\x9b\xfb\x96\x6a\xde\xc3\xe3\xc3\x78\x7e\x5a\xb1\x93\x6f\xdc\x8d\x4e\x02\xd5\xbc\x5c\x0b\x54\x4b\xaa\xd3\x60\x2f\x5a\x00\xa0\xdb\x6d\xb2\xa1\x72\xbb\xac\xc4\xe8\x6b\xe8\x09\xa4\x92\xb0\x64\xcd\x7e\x03\x6e\xa2\xfa\x20\xab\x4a\xea\xe3\x30\xa2\x32\xc5\x4c\xbd\x2d\x86\x39\x65\xe6\x32\x9e\x0a\xc8\xd0\xe9\xe0\xaf\x84\x8a\xdd\x9a\x6b\x4d\x60\xe8\x06\xeb\x6b\x4f\x76\x2b\xf6\xa6\x5b\x7d\x80\xea\x77\x5d\x8c\x93\xe9\x1b\x82\xea\x99\xa9\x0b\xf3\xd9\xcd\x31\x9b\x4b\x7d\xfa\xeb\xdc\x87\xed\x46\x78\x1d\xec\xd1\x77\xff\x68\xb7\x76\x31\x56\x5f\x1f\x2f\x29\xc9\x6c\x7f\x33\xc5\x6b\xf4\x9f\x7f\x1d\xe6\x56\x5d\x2d\xdd\x51\x95\xdf\x8b\xaa\x3c\x85\x9f\x00\x00\x00\xff\xff\x77\x41\xcc\x69\x12\x02\x00\x00")

func assetsDirTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsDirTpl,
		"assets/dir.tpl",
	)
}

func assetsDirTpl() (*asset, error) {
	bytes, err := assetsDirTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dir.tpl", size: 530, mode: os.FileMode(436), modTime: time.Unix(1580983305, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/dir.tpl": assetsDirTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"dir.tpl": &bintree{assetsDirTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

